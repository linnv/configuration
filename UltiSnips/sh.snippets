global !p
import vim
extends all

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
	return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
	for scope in ["g", "b"]:
		for shell in ["bash", "posix", "sh", "kornshell"]:
			if testShell(scope, shell) == "1":
				if shell == "kornshell":
					return "ksh"
				if shell == "posix":
					return "sh"
				return shell
	return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env ' + getShell() + "\n\n" `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet case "case .. esac (case)"
case ${1:word} in
	${2:pattern} )
		$0;;
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
	${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet snippet if "if ... then (if)" if ${2:[[ ${1:condition} ]]}; then
	${0:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet headerComment "header declare"
#!/usr/bin/env bash
endsnippet

snippet argvChecking "check number of input argvs" !b
if [ $# -eq $1 ]
  then
    echo "argvs must at least $1"
    exit 1
fi
endsnippet

snippet checkFirstArgv "check the first argv is empty or not" !b
if [ -z "\$1" ]
  then
    echo "No argument supplied"
    exit 1
fi
endsnippet

snippet ip127 "local host ip" !b
127.0.0.1
endsnippet
# vim:ft=snippets:
snippet forLoopSlice "str in str slice" !b
declare -a listOf$1=(
${2:a
b}
)

for v in ${listOf$1[@]};do
	echo "$v"
done
endsnippet

snippet mainCase "case to in begining" !b
#!/usr/bin/env bash

function start(){
	echo "starting"
	return 
}

function stop(){
	echo "stopping"
	return 
}

function restart(){
	echo "restarting"
	return 
}

case \$1 in
	"0"|"start" )
		start
		;;
	"1"|"stop" )
		stop
		;;
	"2"|"restart" )
		restart
		;;
	* )
		echo "usage: \$0  {option}
option:{
0 or start : start operation
1 or stop: stop operation
2 or restart: stop operation
}"
		;;
esac
endsnippet

# macOS
snippet notify_center_sh "alter a center to macOS" !b
#!/usr/bin/env bash

function log()
{
    echo `date +"[%d.%m.%Y %H:%M:%S] "`$1

# Available Sounds:
# Basso, Blow, Bottle, Frog, Funk, Glass, Hero, 
# Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
    osascript << EOF
display notification "$1" with title "`basename $0`" sound name "Submarine"
EOF

    return
}

log "$*"
endsnippet

snippet notify_center_echo "alter a center to macOS" !b
osascript << EOF
display notification "$1" with title "`basename $0`" sound name "Submarine"
EOF
endsnippet

snippet postJson "curl post json" !b
curl -i -H 'content-type:application/json' -d '
${1:json}
' "${2:host}"
endsnippet

snippet esListAllIndex "list all list of es" !b
curl -X GET "localhost:9200/_cat/indices?v"
endsnippet

snippet esSearch "search " !b
curl -X GET "localhost:9201/$1/_search?pretty=true""
endsnippet

snippet esMapping "mapping of index " !b
curl -X GET "localhost:9200/$1/_mapping?pretty=true""
endsnippet

snippet bashSwichOS "switch on OS" !b
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     
	    ips=$(ip a)
	    machine=Linux;;
    Darwin*)    
	    ips=$(ifconfig)
	    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac

snippet forLoopExitSignal "keep doing until receive exit c-c signal" !b
#!/bin/bash
trap "exit" INT
while :
do
	$1
    sleep 1s
done

endsnippet

snippet foriIterator "i 1..100" !b
for i in {1..100} ; do
	#curl http://127.0.0.1:8186/version
	sleep 1s
done
endsnippet
